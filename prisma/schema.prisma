// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

// Modelo User unificado
model User {
  id                String    @id @default(cuid())
  name              String
  email             String    @unique
  password          String
  image             String?
  role              Role      @default(CLIENT)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  reviewsWritten    Review[]            @relation("ReviewsByUser")
  professionalProfile ProfessionalProfile?
}

// Perfil espec√≠fico para profesionales
model ProfessionalProfile {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  phone       String?
  bio         String?  @db.Text
  workPhotos  String[]
  workedAreas String[]
  reviewsReceived Review[]   @relation("ReviewsForProfessional")
  services        Service[]
}

// MEJORA: A√±adimos un modelo para las categor√≠as de servicios
model ServiceCategory {
  id          String    @id @default(cuid())
  name        String    @unique // ej: "Servicios del Hogar"
  slug        String    @unique // ej: "servicios-del-hogar"
  icon        String?   // ej: "üè†"
  
  // Relaci√≥n: Una categor√≠a tiene muchos servicios
  services    Service[]
}

// Modelo de Servicio ahora relacionado a una Categor√≠a
model Service {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  icon        String?
  
  // Relaci√≥n: Un servicio pertenece a una categor√≠a
  category    ServiceCategory @relation(fields: [categoryId], references: [id])
  categoryId  String
  
  professionals ProfessionalProfile[]
}

model Review {
  id          String   @id @default(cuid())
  rating      Int
  comment     String?  @db.Text
  createdAt   DateTime @default(now())
  author      User     @relation("ReviewsByUser", fields: [authorId], references: [id])
  authorId    String
  professional    ProfessionalProfile @relation("ReviewsForProfessional", fields: [professionalId], references: [id])
  professionalId  String
}

enum Role {
  CLIENT
  PROFESSIONAL
  ADMIN
}
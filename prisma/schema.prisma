datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

model User {
  id                  String    @id @default(cuid())
  name                String
  email               String    @unique
  password            String
  image               String?
  role                Role      @default(CLIENT)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  reviewsWritten      Review[]            @relation("ReviewsByUser")
  professionalProfile ProfessionalProfile?
  bookingsAsClient    Booking[]           @relation("ClientBookings") // Relación a sus reservas
}

model ProfessionalProfile {
  id                String    @id @default(cuid())
  user              User      @relation(fields: [userId], references: [id])
  userId            String    @unique
  phone             String?
  bio               String?   @db.Text
  workPhotos        String[]
  workedAreas       String[]
  
  reviewsReceived   Review[]  @relation("ReviewsForProfessional")
  services          Service[]
  bookingsAsPro     Booking[] @relation("ProfessionalBookings") // Relación a las reservas que recibe
}

model ServiceCategory {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  icon      String?
  services  Service[]
}

model Service {
  id            String    @id @default(cuid())
  name          String    @unique
  slug          String    @unique
  description   String?
  icon          String?
  category      ServiceCategory @relation(fields: [categoryId], references: [id])
  categoryId    String
  professionals ProfessionalProfile[]
}

model Review {
  id              String   @id @default(cuid())
  rating          Int
  comment         String?  @db.Text
  createdAt       DateTime @default(now())
  author          User     @relation("ReviewsByUser", fields: [authorId], references: [id])
  authorId        String
  professional    ProfessionalProfile @relation("ReviewsForProfessional", fields: [professionalId], references: [id])
  professionalId  String
}

// MEJORA: Añadimos el modelo para las Reservas (Bookings)
model Booking {
  id              String    @id @default(cuid())
  date            DateTime
  time            String
  status          String    @default("PENDING") // PENDING, CONFIRMED, CANCELED, COMPLETED
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  client          User                @relation("ClientBookings", fields: [clientId], references: [id])
  clientId        String
  
  professional    ProfessionalProfile @relation("ProfessionalBookings", fields: [professionalId], references: [id])
  professionalId  String
}

enum Role {
  CLIENT
  PROFESSIONAL
  ADMIN
}